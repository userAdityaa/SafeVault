scalar Upload

type AuthPayload {
  token: String!
  user: User!
}

input SignupInput {
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type File {
  id: ID!
  hash: String!
  originalName: String!
  mimeType: String!
  size: Int!
  visibility: String!
  createdAt: String!
}

type UserFile {
  id: ID!
  userId: ID!
  fileId: ID!
  uploadedAt: String!
  file: File!
}

input UploadFileInput {
  files: [Upload!]!
}

input GoogleLoginInput {
  idToken: String!
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  googleLogin(input: GoogleLoginInput!): AuthPayload!

  uploadFiles(input: UploadFileInput!): [UserFile!]!
}

type User {
  id: ID!
  email: String!
  createdAt: String!
  updatedAt: String!
}

type Query {
  # Just a placeholder so the schema is valid
  _health: String!
  myFiles: [UserFile!]!
  myStorage: StorageUsage!
  findMyFileByHash(hash: String!): UserFile
  fileURL(fileId: ID!, inline: Boolean): String!
}

type StorageUsage {
  usedBytes: Int!
  quotaBytes: Int!
  percentUsed: Float!
}
