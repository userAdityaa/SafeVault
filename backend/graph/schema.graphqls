scalar Upload

type AuthPayload {
  token: String!
  user: User!
}

input SignupInput {
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type File {
  id: ID!
  hash: String!
  originalName: String!
  mimeType: String!
  size: Int!
  refCount: Int!
  visibility: String!
  createdAt: String!
}

type UserFile {
  id: ID!
  userId: ID!
  fileId: ID!
  uploadedAt: String!
  file: File!
  uploader: Uploader
}

input UploadFileInput {
  files: [Upload!]!
  allowDuplicate: Boolean
}

input GoogleLoginInput {
  idToken: String!
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  googleLogin(input: GoogleLoginInput!): AuthPayload!

  uploadFiles(input: UploadFileInput!): [UserFile!]!
  deleteFile(fileId: ID!): Boolean!
  purgeFile(fileId: ID!): Boolean!

  # Folder mutations
  createFolder(name: String!, parentId: ID): Folder!
  renameFolder(folderId: ID!, newName: String!): Boolean!
  deleteFolder(folderId: ID!): Boolean!
  moveUserFile(mappingId: ID!, folderId: ID): Boolean!

  # Sharing mutations
  shareFile(input: ShareFileInput!): FileShare!
  shareFolder(input: ShareFolderInput!): FolderShare!
  unshareFile(fileId: ID!, sharedWithEmail: String!): Boolean!
  unshareFolder(folderId: ID!, sharedWithEmail: String!): Boolean!

  # Public link mutations (owner only)
  createPublicFileLink(fileId: ID!, expiresAt: String): PublicFileLink!
  revokePublicFileLink(fileId: ID!): Boolean!
  createPublicFolderLink(folderId: ID!, expiresAt: String): PublicFolderLink!
  revokePublicFolderLink(folderId: ID!): Boolean!

  # Add a publicly linked file into my storage (creates user_file mapping)
  addPublicFileToMyStorage(token: String!): Boolean!
}

type User {
  id: ID!
  email: String!
  name: String
  picture: String
  createdAt: String!
  updatedAt: String!
  isAdmin: Boolean!
}

type AdminUserInfo {
  id: ID!
  email: String!
  name: String
  picture: String
  createdAt: String!
  updatedAt: String!
  totalFiles: Int!
  totalFolders: Int!
  storageUsed: Int!
}

"""
Represents the uploader of a file. Can originate from either users or google_users.
"""
type Uploader {
  email: String!
  name: String
  picture: String
}

type Query {
  # Just a placeholder so the schema is valid
  _health: String!
  myFiles: [UserFile!]!
  myFolderFiles(folderId: ID): [UserFile!]!
  myDeletedFiles: [UserFile!]!
  myStorage: StorageUsage!
  findMyFileByHash(hash: String!): UserFile
  fileURL(fileId: ID!, inline: Boolean): String!
  searchMyFiles(
    filter: FileSearchFilter!
    pagination: PageInput
  ): UserFileConnection!
  myFolders(parentId: ID): [Folder!]!

  # Sharing queries
  sharedFilesWithMe: [SharedFileWithMe!]!
  sharedFoldersWithMe: [SharedFolderWithMe!]!
  sharedFolderFiles(folderId: ID!): [UserFile!]!
  fileShares(fileId: ID!): [FileShare!]!
  folderShares(folderId: ID!): [FolderShare!]!

  # Public link resolution (no auth required)
  resolvePublicFileLink(token: String!): PublicFileLinkResolved
  resolvePublicFolderLink(token: String!): PublicFolderLinkResolved
  publicFolderFiles(token: String!): [UserFile!]!

  # Admin queries (admin only)
  adminAllUsers: [AdminUserInfo!]!
  adminUserFiles(userId: ID!): [UserFile!]!
  adminUserFolders(userId: ID!): [Folder!]!
}

type StorageUsage {
  usedBytes: Int!
  quotaBytes: Int!
  percentUsed: Float!
  savingsBytes: Int!
  savingsPercent: Float!
}

input FileSearchFilter {
  filename: String
  mimeTypes: [String!]
  sizeMin: Int
  sizeMax: Int
  createdAfter: String
  createdBefore: String
  tags: [String!]
  uploaderName: String
}

input PageInput {
  limit: Int
  cursor: String
}

type UserFileEdge {
  cursor: String!
  node: UserFile!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type UserFileConnection {
  edges: [UserFileEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Folder {
  id: ID!
  name: String!
  parentId: ID
  createdAt: String!
}

# Sharing types
type FileShare {
  id: ID!
  fileId: ID!
  ownerId: ID!
  sharedWithEmail: String!
  sharedWithId: ID
  permission: String!
  sharedAt: String!
  expiresAt: String
  file: File!
  owner: User!
  sharedWithUser: User
}

type FolderShare {
  id: ID!
  folderId: ID!
  ownerId: ID!
  sharedWithEmail: String!
  sharedWithId: ID
  permission: String!
  sharedAt: String!
  expiresAt: String
  folder: Folder!
  owner: User!
  sharedWithUser: User
}

type SharedFileWithMe {
  id: ID!
  fileId: ID!
  ownerId: ID!
  sharedWithEmail: String!
  permission: String!
  sharedAt: String!
  file: File!
  owner: User!
}

type SharedFolderWithMe {
  id: ID!
  folderId: ID!
  ownerId: ID!
  sharedWithEmail: String!
  permission: String!
  sharedAt: String!
  folder: Folder!
  owner: User!
}

input ShareFileInput {
  fileId: ID!
  emails: [String!]!
  permission: String! # viewer only
  expiresAt: String
}

input ShareFolderInput {
  folderId: ID!
  emails: [String!]!
  permission: String! # viewer only
  expiresAt: String
}

# Public link types
type PublicFileLink {
  fileId: ID!
  token: String!
  url: String! # canonical public share URL path, client constructs full URL
  createdAt: String!
  expiresAt: String
  revokedAt: String
}

type PublicFolderLink {
  folderId: ID!
  token: String!
  url: String!
  createdAt: String!
  expiresAt: String
  revokedAt: String
}

type PublicFileLinkResolved {
  token: String!
  file: File!
  owner: User!
  expiresAt: String
  revoked: Boolean!
}

type PublicFolderLinkResolved {
  token: String!
  folder: Folder!
  owner: User!
  expiresAt: String
  revoked: Boolean!
}
