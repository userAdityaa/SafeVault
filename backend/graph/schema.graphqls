scalar Upload

type AuthPayload {
  token: String!
  user: User!
}

input SignupInput {
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type File {
  id: ID!
  hash: String!
  originalName: String!
  mimeType: String!
  size: Int!
  refCount: Int!
  visibility: String!
  createdAt: String!
}

type UserFile {
  id: ID!
  userId: ID!
  fileId: ID!
  uploadedAt: String!
  file: File!
  uploader: Uploader
}

input UploadFileInput {
  files: [Upload!]!
  allowDuplicate: Boolean
}

input GoogleLoginInput {
  idToken: String!
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  googleLogin(input: GoogleLoginInput!): AuthPayload!

  uploadFiles(input: UploadFileInput!): [UserFile!]!
  deleteFile(fileId: ID!): Boolean!
  purgeFile(fileId: ID!): Boolean!

  # Folder mutations
  createFolder(name: String!, parentId: ID): Folder!
  renameFolder(folderId: ID!, newName: String!): Boolean!
  deleteFolder(folderId: ID!): Boolean!
  moveUserFile(mappingId: ID!, folderId: ID): Boolean!
}

type User {
  id: ID!
  email: String!
  name: String
  picture: String
  createdAt: String!
  updatedAt: String!
}

"""
Represents the uploader of a file. Can originate from either users or google_users.
"""
type Uploader {
  email: String!
  name: String
  picture: String
}

type Query {
  # Just a placeholder so the schema is valid
  _health: String!
  myFiles: [UserFile!]!
  myFolderFiles(folderId: ID): [UserFile!]!
  myDeletedFiles: [UserFile!]!
  myStorage: StorageUsage!
  findMyFileByHash(hash: String!): UserFile
  fileURL(fileId: ID!, inline: Boolean): String!
  searchMyFiles(
    filter: FileSearchFilter!
    pagination: PageInput
  ): UserFileConnection!
  myFolders(parentId: ID): [Folder!]!
}

type StorageUsage {
  usedBytes: Int!
  quotaBytes: Int!
  percentUsed: Float!
  savingsBytes: Int!
  savingsPercent: Float!
}

input FileSearchFilter {
  filename: String
  mimeTypes: [String!]
  sizeMin: Int
  sizeMax: Int
  createdAfter: String
  createdBefore: String
  tags: [String!]
  uploaderName: String
}

input PageInput {
  limit: Int
  cursor: String
}

type UserFileEdge {
  cursor: String!
  node: UserFile!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type UserFileConnection {
  edges: [UserFileEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Folder {
  id: ID!
  name: String!
  parentId: ID
  createdAt: String!
}
