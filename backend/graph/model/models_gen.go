// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/99designs/gqlgen/graphql"
)

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type File struct {
	ID           string `json:"id"`
	Hash         string `json:"hash"`
	OriginalName string `json:"originalName"`
	MimeType     string `json:"mimeType"`
	Size         int    `json:"size"`
	RefCount     int    `json:"refCount"`
	Visibility   string `json:"visibility"`
	CreatedAt    string `json:"createdAt"`
}

type FileSearchFilter struct {
	Filename      *string  `json:"filename,omitempty"`
	MimeTypes     []string `json:"mimeTypes,omitempty"`
	SizeMin       *int     `json:"sizeMin,omitempty"`
	SizeMax       *int     `json:"sizeMax,omitempty"`
	CreatedAfter  *string  `json:"createdAfter,omitempty"`
	CreatedBefore *string  `json:"createdBefore,omitempty"`
	Tags          []string `json:"tags,omitempty"`
	UploaderName  *string  `json:"uploaderName,omitempty"`
}

type FileShare struct {
	ID              string  `json:"id"`
	FileID          string  `json:"fileId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	SharedWithID    *string `json:"sharedWithId,omitempty"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	ExpiresAt       *string `json:"expiresAt,omitempty"`
	File            *File   `json:"file"`
	Owner           *User   `json:"owner"`
	SharedWithUser  *User   `json:"sharedWithUser,omitempty"`
}

type Folder struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	ParentID  *string `json:"parentId,omitempty"`
	CreatedAt string  `json:"createdAt"`
}

type FolderShare struct {
	ID              string  `json:"id"`
	FolderID        string  `json:"folderId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	SharedWithID    *string `json:"sharedWithId,omitempty"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	ExpiresAt       *string `json:"expiresAt,omitempty"`
	Folder          *Folder `json:"folder"`
	Owner           *User   `json:"owner"`
	SharedWithUser  *User   `json:"sharedWithUser,omitempty"`
}

type GoogleLoginInput struct {
	IDToken string `json:"idToken"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type PageInput struct {
	Limit  *int    `json:"limit,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

type PublicFileLink struct {
	FileID    string  `json:"fileId"`
	Token     string  `json:"token"`
	URL       string  `json:"url"`
	CreatedAt string  `json:"createdAt"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	RevokedAt *string `json:"revokedAt,omitempty"`
}

type PublicFileLinkResolved struct {
	Token     string  `json:"token"`
	File      *File   `json:"file"`
	Owner     *User   `json:"owner"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Revoked   bool    `json:"revoked"`
}

type PublicFolderLink struct {
	FolderID  string  `json:"folderId"`
	Token     string  `json:"token"`
	URL       string  `json:"url"`
	CreatedAt string  `json:"createdAt"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	RevokedAt *string `json:"revokedAt,omitempty"`
}

type PublicFolderLinkResolved struct {
	Token     string  `json:"token"`
	Folder    *Folder `json:"folder"`
	Owner     *User   `json:"owner"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Revoked   bool    `json:"revoked"`
}

type Query struct {
}

type ShareFileInput struct {
	FileID     string   `json:"fileId"`
	Emails     []string `json:"emails"`
	Permission string   `json:"permission"`
	ExpiresAt  *string  `json:"expiresAt,omitempty"`
}

type ShareFolderInput struct {
	FolderID   string   `json:"folderId"`
	Emails     []string `json:"emails"`
	Permission string   `json:"permission"`
	ExpiresAt  *string  `json:"expiresAt,omitempty"`
}

type SharedFileWithMe struct {
	ID              string `json:"id"`
	FileID          string `json:"fileId"`
	OwnerID         string `json:"ownerId"`
	SharedWithEmail string `json:"sharedWithEmail"`
	Permission      string `json:"permission"`
	SharedAt        string `json:"sharedAt"`
	File            *File  `json:"file"`
	Owner           *User  `json:"owner"`
}

type SharedFolderWithMe struct {
	ID              string  `json:"id"`
	FolderID        string  `json:"folderId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	Folder          *Folder `json:"folder"`
	Owner           *User   `json:"owner"`
}

type SignupInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type StorageUsage struct {
	UsedBytes      int     `json:"usedBytes"`
	QuotaBytes     int     `json:"quotaBytes"`
	PercentUsed    float64 `json:"percentUsed"`
	SavingsBytes   int     `json:"savingsBytes"`
	SavingsPercent float64 `json:"savingsPercent"`
}

type UploadFileInput struct {
	Files          []*graphql.Upload `json:"files"`
	AllowDuplicate *bool             `json:"allowDuplicate,omitempty"`
}

// Represents the uploader of a file. Can originate from either users or google_users.
type Uploader struct {
	Email   string  `json:"email"`
	Name    *string `json:"name,omitempty"`
	Picture *string `json:"picture,omitempty"`
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	Name      *string `json:"name,omitempty"`
	Picture   *string `json:"picture,omitempty"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
}

type UserFile struct {
	ID         string    `json:"id"`
	UserID     string    `json:"userId"`
	FileID     string    `json:"fileId"`
	UploadedAt string    `json:"uploadedAt"`
	File       *File     `json:"file"`
	Uploader   *Uploader `json:"uploader,omitempty"`
}

type UserFileConnection struct {
	Edges      []*UserFileEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type UserFileEdge struct {
	Cursor string    `json:"cursor"`
	Node   *UserFile `json:"node"`
}
