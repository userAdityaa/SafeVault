// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/99designs/gqlgen/graphql"
)

// Extended user information for administrative views
type AdminUserInfo struct {
	// Unique identifier for the user
	ID string `json:"id"`
	// User's email address
	Email string `json:"email"`
	// User's display name (optional)
	Name *string `json:"name,omitempty"`
	// URL to user's profile picture (optional)
	Picture *string `json:"picture,omitempty"`
	// ISO timestamp when account was created
	CreatedAt string `json:"createdAt"`
	// ISO timestamp when account was last updated
	UpdatedAt string `json:"updatedAt"`
	// Total number of files owned by user
	TotalFiles int `json:"totalFiles"`
	// Total number of folders owned by user
	TotalFolders int `json:"totalFolders"`
	// Total storage used by user in bytes
	StorageUsed int `json:"storageUsed"`
}

// Authentication response containing JWT token and user information
type AuthPayload struct {
	// JWT token for subsequent authenticated requests
	Token string `json:"token"`
	// User account information
	User *User `json:"user"`
}

// Represents a file stored in the system with deduplication by hash
type File struct {
	// Unique identifier for the file
	ID string `json:"id"`
	// SHA-256 hash of file content for deduplication
	Hash string `json:"hash"`
	// Original filename when uploaded
	OriginalName string `json:"originalName"`
	// MIME type describing file content
	MimeType string `json:"mimeType"`
	// File size in bytes
	Size int `json:"size"`
	// Number of users referencing this file
	RefCount int `json:"refCount"`
	// Access level: private, public, or shared
	Visibility string `json:"visibility"`
	// ISO timestamp when file was created
	CreatedAt string `json:"createdAt"`
}

type FileActivity struct {
	ID           string `json:"id"`
	FileID       string `json:"fileId"`
	UserID       string `json:"userId"`
	ActivityType string `json:"activityType"`
	ActivityAt   string `json:"activityAt"`
	File         *File  `json:"file"`
	User         *User  `json:"user"`
}

type FileDownload struct {
	ID             string  `json:"id"`
	FileID         string  `json:"fileId"`
	DownloadedBy   *string `json:"downloadedBy,omitempty"`
	OwnerID        string  `json:"ownerId"`
	DownloadType   string  `json:"downloadType"`
	ShareToken     *string `json:"shareToken,omitempty"`
	IPAddress      string  `json:"ipAddress"`
	UserAgent      string  `json:"userAgent"`
	DownloadedAt   string  `json:"downloadedAt"`
	File           *File   `json:"file"`
	DownloadedUser *User   `json:"downloadedUser,omitempty"`
	Owner          *User   `json:"owner"`
}

type FileDownloadStats struct {
	FileID          string  `json:"fileId"`
	OwnerID         string  `json:"ownerId"`
	TotalDownloads  int     `json:"totalDownloads"`
	SharedDownloads int     `json:"sharedDownloads"`
	PublicDownloads int     `json:"publicDownloads"`
	LastDownloadAt  *string `json:"lastDownloadAt,omitempty"`
	File            *File   `json:"file"`
	Owner           *User   `json:"owner"`
}

type FileSearchFilter struct {
	Filename      *string  `json:"filename,omitempty"`
	MimeTypes     []string `json:"mimeTypes,omitempty"`
	SizeMin       *int     `json:"sizeMin,omitempty"`
	SizeMax       *int     `json:"sizeMax,omitempty"`
	CreatedAfter  *string  `json:"createdAfter,omitempty"`
	CreatedBefore *string  `json:"createdBefore,omitempty"`
	Tags          []string `json:"tags,omitempty"`
	UploaderName  *string  `json:"uploaderName,omitempty"`
}

type FileShare struct {
	ID              string  `json:"id"`
	FileID          string  `json:"fileId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	SharedWithID    *string `json:"sharedWithId,omitempty"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	ExpiresAt       *string `json:"expiresAt,omitempty"`
	File            *File   `json:"file"`
	Owner           *User   `json:"owner"`
	SharedWithUser  *User   `json:"sharedWithUser,omitempty"`
}

type Folder struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	ParentID  *string `json:"parentId,omitempty"`
	CreatedAt string  `json:"createdAt"`
}

// File entry for folder upload with its relative path
type FolderFileInput struct {
	// The actual file content
	File graphql.Upload `json:"file"`
	// Relative path of the file within the folder structure
	RelativePath string `json:"relativePath"`
}

type FolderShare struct {
	ID              string  `json:"id"`
	FolderID        string  `json:"folderId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	SharedWithID    *string `json:"sharedWithId,omitempty"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	ExpiresAt       *string `json:"expiresAt,omitempty"`
	Folder          *Folder `json:"folder"`
	Owner           *User   `json:"owner"`
	SharedWithUser  *User   `json:"sharedWithUser,omitempty"`
}

// Input for Google OAuth authentication
type GoogleLoginInput struct {
	// Google ID token from OAuth flow
	IDToken string `json:"idToken"`
}

// Input for user authentication
type LoginInput struct {
	// User's email address
	Email string `json:"email"`
	// User's password
	Password string `json:"password"`
}

// Root mutation type containing all write operations
type Mutation struct {
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type PageInput struct {
	Limit  *int    `json:"limit,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

type PublicFileLink struct {
	FileID    string  `json:"fileId"`
	Token     string  `json:"token"`
	URL       string  `json:"url"`
	CreatedAt string  `json:"createdAt"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	RevokedAt *string `json:"revokedAt,omitempty"`
}

type PublicFileLinkResolved struct {
	Token     string  `json:"token"`
	File      *File   `json:"file"`
	Owner     *User   `json:"owner"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Revoked   bool    `json:"revoked"`
}

type PublicFolderLink struct {
	FolderID  string  `json:"folderId"`
	Token     string  `json:"token"`
	URL       string  `json:"url"`
	CreatedAt string  `json:"createdAt"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	RevokedAt *string `json:"revokedAt,omitempty"`
}

type PublicFolderLinkResolved struct {
	Token     string  `json:"token"`
	Folder    *Folder `json:"folder"`
	Owner     *User   `json:"owner"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Revoked   bool    `json:"revoked"`
}

// Root query type containing all read operations
type Query struct {
}

type RecentFileActivity struct {
	FileID           string `json:"fileId"`
	UserID           string `json:"userId"`
	LastActivityType string `json:"lastActivityType"`
	LastActivityAt   string `json:"lastActivityAt"`
	ActivityCount    int    `json:"activityCount"`
	File             *File  `json:"file"`
}

type ShareFileInput struct {
	FileID     string   `json:"fileId"`
	Emails     []string `json:"emails"`
	Permission string   `json:"permission"`
	ExpiresAt  *string  `json:"expiresAt,omitempty"`
}

type ShareFolderInput struct {
	FolderID   string   `json:"folderId"`
	Emails     []string `json:"emails"`
	Permission string   `json:"permission"`
	ExpiresAt  *string  `json:"expiresAt,omitempty"`
}

type SharedFileWithMe struct {
	ID              string `json:"id"`
	FileID          string `json:"fileId"`
	OwnerID         string `json:"ownerId"`
	SharedWithEmail string `json:"sharedWithEmail"`
	Permission      string `json:"permission"`
	SharedAt        string `json:"sharedAt"`
	File            *File  `json:"file"`
	Owner           *User  `json:"owner"`
}

type SharedFolderWithMe struct {
	ID              string  `json:"id"`
	FolderID        string  `json:"folderId"`
	OwnerID         string  `json:"ownerId"`
	SharedWithEmail string  `json:"sharedWithEmail"`
	Permission      string  `json:"permission"`
	SharedAt        string  `json:"sharedAt"`
	Folder          *Folder `json:"folder"`
	Owner           *User   `json:"owner"`
}

// Input for creating a new user account
type SignupInput struct {
	// User's email address (must be unique)
	Email string `json:"email"`
	// Plain text password (will be hashed before storage)
	Password string `json:"password"`
}

type StarredFile struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	ItemType  string `json:"itemType"`
	ItemID    string `json:"itemId"`
	StarredAt string `json:"starredAt"`
	File      *File  `json:"file"`
}

type StarredFolder struct {
	ID        string  `json:"id"`
	UserID    string  `json:"userId"`
	ItemType  string  `json:"itemType"`
	ItemID    string  `json:"itemId"`
	StarredAt string  `json:"starredAt"`
	Folder    *Folder `json:"folder"`
}

type StarredItem struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	ItemType  string `json:"itemType"`
	ItemID    string `json:"itemId"`
	StarredAt string `json:"starredAt"`
}

type StorageUsage struct {
	UsedBytes      int     `json:"usedBytes"`
	QuotaBytes     int     `json:"quotaBytes"`
	PercentUsed    float64 `json:"percentUsed"`
	SavingsBytes   int     `json:"savingsBytes"`
	SavingsPercent float64 `json:"savingsPercent"`
}

// Input for uploading one or more files
type UploadFileInput struct {
	// Array of files to upload
	Files []*graphql.Upload `json:"files"`
	// Whether to allow duplicate uploads (bypass deduplication)
	AllowDuplicate *bool `json:"allowDuplicate,omitempty"`
}

// Input for uploading a folder with its nested structure
type UploadFolderInput struct {
	// Array of files with their relative paths within the folder
	Files []*FolderFileInput `json:"files"`
	// Name of the root folder being uploaded
	FolderName string `json:"folderName"`
	// Parent folder ID where the folder should be created
	ParentID *string `json:"parentId,omitempty"`
	// Whether to allow duplicate uploads (bypass deduplication)
	AllowDuplicate *bool `json:"allowDuplicate,omitempty"`
}

type UploadFolderResult struct {
	// The created root folder
	Folder *Folder `json:"folder"`
	// Array of uploaded files within the folder structure
	Files []*UserFile `json:"files"`
	// Summary of upload statistics
	Summary *UploadSummary `json:"summary"`
}

type UploadSummary struct {
	// Total number of files uploaded
	TotalFiles int `json:"totalFiles"`
	// Total number of folders created
	TotalFolders int `json:"totalFolders"`
	// Total size in bytes of uploaded content
	TotalSize int `json:"totalSize"`
}

// Represents the uploader of a file. Can originate from either users or google_users.
type Uploader struct {
	// Email address of the uploader
	Email string `json:"email"`
	// Display name of the uploader (optional)
	Name *string `json:"name,omitempty"`
	// Profile picture URL of the uploader (optional)
	Picture *string `json:"picture,omitempty"`
}

// Represents a user account in the system
type User struct {
	// Unique identifier for the user
	ID string `json:"id"`
	// User's email address
	Email string `json:"email"`
	// User's display name (optional)
	Name *string `json:"name,omitempty"`
	// URL to user's profile picture (optional)
	Picture *string `json:"picture,omitempty"`
	// ISO timestamp when account was created
	CreatedAt string `json:"createdAt"`
	// ISO timestamp when account was last updated
	UpdatedAt string `json:"updatedAt"`
	// Whether user has administrative privileges
	IsAdmin bool `json:"isAdmin"`
}

// Association between a user and a file they have access to
type UserFile struct {
	// Unique identifier for this user-file association
	ID string `json:"id"`
	// ID of the user who has access
	UserID string `json:"userId"`
	// ID of the file being accessed
	FileID string `json:"fileId"`
	// ISO timestamp when association was created
	UploadedAt string `json:"uploadedAt"`
	// The associated file data
	File *File `json:"file"`
	// Information about who originally uploaded the file
	Uploader *Uploader `json:"uploader,omitempty"`
}

type UserFileConnection struct {
	Edges      []*UserFileEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type UserFileEdge struct {
	Cursor string    `json:"cursor"`
	Node   *UserFile `json:"node"`
}
